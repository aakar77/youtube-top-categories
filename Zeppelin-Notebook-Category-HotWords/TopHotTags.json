{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","lineNumbers":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513785452164_1593710149","id":"20171220-105732_1457973555","dateCreated":"2017-12-20T10:57:32-0500","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1694","text":"\n// This is the code of map reduce function, which is perfomed on zeppelin HPC\n\n//val business_data = sqlContext.read.json(\"file:/home/adj329/home/videoTags\")\n\n// Reading the data from videoTags file\nval business_data = sqlContext.read.json(\"file:/home/adj329/videoTags\")\n\nbusiness_data.createOrReplaceTempView(\"tagdata\")\n\n// getting all video categories\nval categoryList_Q = \"SELECT DISTINCT category FROM tagdata\";\n\n// executing the query\nval categoryList_DF = sqlContext.sql(categoryList_Q)\n\n//\nval categoryList = categoryList_DF.select(\"category\").rdd.map(r => r(0)).collect()\n\n// exploding the tags for a given category\nval r2 = business_data.withColumn(\"tags\", explode(when(col(\"tags\").isNotNull, col(\"tags\"))))\n\n//r2.show(22000)\n\n// Groupin all the tags into one field for a given category\nval textfile = r2.groupBy(\"category\").agg(concat_ws(\",\", collect_list(\"tags\")) as \"tags\")\n\n\n// Iterating over all 31 categories and doing map reduce tasks for each category\nfor(cat <- 0 to 30){\n\n  // Getting tag words for the given category pointed by categoryList(cat) and convert into string, seperated by ','\n  val s = textfile.filter(col(\"category\").like(categoryList(cat).toString)).select(\"tags\")\n  val p = s.first().getString(0)\n  \n  print(\"For Category : \"+categoryList(cat))\n  print(\"\\n\")\n\n  // converting the string into RDD\n  val stringRdd = sc.parallelize(List(p))\n\n // Map - reduce word count for tags for a category, data seperated by ','' \n  val counts = stringRdd.flatMap(line => line.split(\",\"))\n    .map(word => (word, 1))\n    .reduceByKey(_+_)\n    .map(item => item.swap) // interchanges position of entries in each tuple\n    .sortByKey(false, 1)\n\n  // converting the data into Data frame\n  val categoryCount = counts.toDF()\n  \n  \n  categoryCount.createOrReplaceTempView(\"tagdata\")\n  \n  // selecting top 25 in each category data frame\n  val top25_Q = \"SELECT _1 as Count, _2 as TopTags FROM tagdata LIMIT 25\"\n  \n  val top25_DF = sqlContext.sql(top25_Q)\n  \n  // writting into CSV file\n  val fileName = \"file:/home/adj329/Top25CategoryTags/\"+categoryList(cat)+\".csv\"\n  \n    top25_DF.coalesce(1).write.format(\"com.databricks.spark.csv\")\n      .option(\"header\", \"true\")\n      .save(fileName)\n}\n\n\n/*\nfor (cat <- 0 to 1){\n   //println(categoryList[cat])\n   val categoryRDF = r2.filter(col(\"category\").like(categoryList(cat).toString))\n   categoryRDF.agg(concat_ws(\" \", collect_list(\"tags\")) as \"tags\").show()\n   //println(categoryRDF.count())\n    array[0][1]\n}\n*/","dateUpdated":"2017-12-20T13:17:51-0500","dateFinished":"2017-12-20T13:18:09-0500","dateStarted":"2017-12-20T13:17:51-0500","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"business_data: org.apache.spark.sql.DataFrame = [category: string, tags: array<string> ... 1 more field]\ncategoryList_Q: String = SELECT DISTINCT category FROM tagdata\ncategoryList_DF: org.apache.spark.sql.DataFrame = [category: string]\ncategoryList: Array[Any] = Array(Shows, Education, Thriller, Gaming, Entertainment, Videoblogging, Travel & Events, Science & Technology, Foreign, Sports, Drama, Documentary, Howto & Style, Anime/Animation, Film & Animation, Sci-Fi/Fantasy, Family, People & Blogs, News & Politics, Pets & Animals, Movies, Autos & Vehicles, Classics, Action/Adventure, Music, Short Movies, Nonprofits & Activis, Horror, Shorts, Comedy, Trailers)\nr2: org.apache.spark.sql.DataFrame = [category: string, tags: string ... 1 more field]\ntextfile: org.apache.spark.sql.DataFrame = [category: string, tags: string]\nFor Category : Shows\nFor Category : Education\nFor Category : Thriller\nFor Category : Gaming\nFor Category : Entertainment\nFor Category : Videoblogging\nFor Category : Travel & Events\nFor Category : Science & Technology\nFor Category : Foreign\nFor Category : Sports\nFor Category : Drama\nFor Category : Documentary\nFor Category : Howto & Style\nFor Category : Anime/Animation\nFor Category : Film & Animation\nFor Category : Sci-Fi/Fantasy\nFor Category : Family\nFor Category : People & Blogs\nFor Category : News & Politics\nFor Category : Pets & Animals\nFor Category : Movies\nFor Category : Autos & Vehicles\nFor Category : Classics\nFor Category : Action/Adventure\nFor Category : Music\nFor Category : Short Movies\nFor Category : Nonprofits & Activis\nFor Category : Horror\nFor Category : Shorts\nFor Category : Comedy\nFor Category : Trailers\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513786005720_-1597615056","id":"20171220-110645_584895591","dateCreated":"2017-12-20T11:06:45-0500","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1764"}],"name":"TopHotTags","id":"2D2B4GSM6","angularObjects":{"2CYN712HE:shared_process":[],"2D227ETFR:shared_process":[],"2D229MY6A:shared_process":[],"2CXBH8NCB:shared_process":[],"2CX8BCHJJ:shared_process":[],"2D1XQ8C3B:shared_process":[],"2CYRF7MRZ:shared_process":[],"2CZWXKNV5:shared_process":[],"2CYVJ1HCT:shared_process":[],"2CYPQ14V5:shared_process":[],"2D1GQDPSE:shared_process":[],"2CZ98Q5UJ:shared_process":[],"2CZV2E498:shared_process":[],"2CXYACK8W:shared_process":[],"2CYD2MBY2:shared_process":[],"2D11RXE6R:shared_process":[],"2CZTVYHCR:shared_process":[],"2D1WFWJGJ:shared_process":[],"2D1WMHFJU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}